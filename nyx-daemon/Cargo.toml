[package]
name = "nyx-daemon"
version = "0.1.0"
edition = "2021"
license = "MIT OR Apache-2.0"
publish = false

[features]
# Minimal default: core daemon path builder + Windows API bindings where applicable
 default = ["path-builder", "windows"]
# Path builder no longer pulls in metrics by default; metrics optional
path-builder = []
experimental-dht = []
experimental-p2p = []
experimental-events = []
experimental-alerts = []
experimental-metrics = ["experimental-alerts"]
experimental-all = [
	"experimental-dht",
	"experimental-p2p",
	"experimental-events",
	"experimental-alerts",
	"experimental-metrics"
]
 # Internal advanced algorithms (kept for research; off by default to suppress dead_code warnings)
 internal-advanced-path = []
 # Added for capability flags referenced in main.rs (previously produced unexpected cfg warnings)
 mpr_experimental = []
 hybrid = []
 cmix = []
 plugin = ["nyx-stream/plugin"]
 low_power = ["dep:nyx-mobile-ffi", "nyx-mobile-ffi/telemetry"]
 # Enable Windows API bindings for metrics on Windows builds
 windows = ["dep:windows"]
 # Enable OpenTelemetry OTLP integration in dependency crate
 otlp = ["nyx-telemetry/otlp"]
 otlp_exporter = ["nyx-telemetry/otlp_exporter", "otlp"]
 # Enable SIMD-accelerated JSON via simd-json (optional)
 simd = ["dep:simd-json"]
 telemetry = []
os_sandbox = ["nyx-core/os_sandbox"]

[dependencies]
async-trait = "0.1"
prost = "0.12"
prost-types = "0.12"
tokio = { version = "1.37", features = ["full"] }
thiserror = "1.0"
tracing = "0.1"
tracing-subscriber = { version = "0.3", features = ["fmt", "env-filter"] }
# tonic = { version = "0.10", default-features = false, features = ["transport", "prost", "codegen"] } # DISABLED: uses ring/openssl
tokio-stream = { version = "0.1", features = ["net"] }
clap = { version = "4.0", features = ["derive"] }
memchr = "2"

# Core Nyx components
nyx-core = { path = "../nyx-core" }
nyx-transport = { path = "../nyx-transport" }
nyx-stream = { path = "../nyx-stream" }
nyx-mix = { path = "../nyx-mix" }
nyx-control = { path = "../nyx-control" }
nyx-telemetry = { path = "../nyx-telemetry" }
nyx-crypto = { path = "../nyx-crypto" }
nyx-fec = { path = "../nyx-fec" }
nyx-mobile-ffi = { path = "../nyx-mobile-ffi", optional = true }

# System information for health checks (pure Rust, cross-platform)
sysinfo = { version = "0.30", default-features = true }

# Additional dependencies for comprehensive implementation
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"
# Optional SIMD JSON backend (used when feature "simd" is enabled)
simd-json = { version = "0.13", optional = true, features = ["serde_impl"] }
uuid = { version = "1.0", features = ["v4", "serde"] }
chrono = { version = "0.4", features = ["serde"] }
dashmap = "5.5"
arc-swap = "1.6"
parking_lot = "0.12"
crossbeam-channel = "0.5"
futures = "0.3"
futures-util = "0.3"
pin-project = "1.1"
bytes = "1.5"
anyhow = "1.0"
once_cell = "1.19"

# System monitoring
url = "2.5"
gethostname = "0.4"
windows = { version = "0.57", features = [
	"Win32_System_Threading",
	"Win32_Storage_FileSystem",
	"Win32_Foundation",
	"Win32_Security"
], optional = true }

# Configuration and serialization
toml = "0.8"
config = "0.14"

# DHT and P2P networking - libp2p DISABLED due to ring C/C++ dependency
# libp2p = { version = "0.53", features = ["kad", "mdns", "yamux", "tcp", "dns", "tokio", "macros", "noise", "request-response"] }
# libp2p-identity = "0.2"
# libp2p-kad = "0.45"

# Pure Rust cryptography (enabled) - using pure Rust crypto instead of libp2p
# TLS dependencies still disabled to avoid ring/openssl
# rustls = { version = "0.21", default-features = false, features = ["logging", "tls12"] }
# tokio-rustls = "0.24"
x25519-dalek = { version = "2.0", features = ["static_secrets"] }
ed25519-dalek = { version = "2.0", features = ["rand_core"] }
blake3 = "1.8"
chacha20poly1305 = { version = "0.10", features = ["alloc"] }
rand = "0.8"
bincode = "1.3"
hex = "0.4"
multiaddr = "0.18"

# Networking and async utilities
socket2 = "0.5"

# Logging
log = "0.4"

# Metrics and telemetry
metrics = "0.22"
metrics-exporter-prometheus = { version = "0.13", default-features = false }
opentelemetry = { version = "0.21", default-features = false, features = ["trace"] }
opentelemetry-otlp = { version = "0.14", default-features = false }
opentelemetry-semantic-conventions = { version = "0.13", default-features = false }

# HTTP server for Prometheus metrics
axum = { version = "0.8", default-features = false, features = ["http1", "json", "matched-path", "original-uri", "tokio", "query"] }
tower = { version = "0.5", default-features = false }
http-body-util = { version = "0.1", default-features = false }
notify = { version = "6", default-features = false, features = ["serde"] }

# Crypto and security
# blake3 = "1.5" # Moved to P2P section above
# Pure Rust DHT dependencies (ed25519-dalek already present above)
# Additional DHT support (hex already present above)

# Pure Rust TLS for tonic (avoiding ring dependency) - DISABLED to avoid C++ deps
# rustls = { version = "0.21", default-features = false, features = ["logging", "std", "tls12"] }
# rustls-pemfile = "1.0"
# tonic-rustls = "0.2"

# Pure Rust crypto backend for rustls (no ring/aws-lc-rs) - DISABLED
# webpki-roots = "0.25"

# Data structures and algorithms
indexmap = "2.1"
lru = "0.12"
priority-queue = "1.3"

# Path and routing
petgraph = "0.6"
geo = "0.27"

# DNS resolver (Pure Rust)
# Secure DNS resolution using hickory-dns (modern, maintained replacement for trust-dns)
hickory-resolver = "0.24"

# Database for peer persistence (Pure Rust alternative)
redb = { version = "2.1", features = ["logging"] }

# DHT and networking - Pure Rust implementation (100% Pure Rust, no C/C++ deps)
# Avoiding ALL ring dependencies; use plain TCP and application-level crypto only
# trust-dns-resolver = "0.23" # REMOVED: replaced with hickory-resolver for security
hmac = "0.12"
sha2 = "0.10"
sha1 = "0.10"
getrandom = "0.2"
base64 = "0.22"
ciborium = "0.2"

[dev-dependencies]
# Hyper 0.14 is used only in tests as an HTTP client to hit Axum server endpoints.
# Keeping it in dev-deps avoids impacting runtime deps (Axum uses Hyper 1.x internally).
hyper = { version = "0.14", features = ["full"] }
criterion = { version = "0.5", features = ["html_reports"] }
tempfile = "3.10"
[build-dependencies]
# tonic-build = "0.10" # DISABLED: uses ring/openssl